/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and map layers,
 * ensuring that only the authenticated user can access their own data. Public read access is granted
 * to exploration suggestions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/mapLayers/{mapLayerId}: Stores map layers associated with a specific user.
 * - /explorationSuggestions/{explorationSuggestionId}: Stores globally accessible exploration suggestions.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Map layers are secured via path-based ownership, enforced by matching the authenticated user's
 *   UID against the 'userId' field in the map layer document.
 * - Exploration suggestions are publicly readable but not writable.
 *
 * Denormalization for Authorization:
 * - MapLayer documents include the `userId` field, a denormalized copy of the user ID. This enables
 *   security rules to validate ownership of MapLayers directly without needing to perform `get()`
 *   operations, enabling atomic operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles, allowing only the authenticated user to
     *              read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their profile.
     * @deny (create, get, update, delete) User with ID 'user456' attempts to access user 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allows creating a user document if the authenticated user's UID matches the document ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allows getting a user document if the authenticated user's UID matches the document ID.
      allow get: if isSignedIn() && isOwner(userId);

      // Allows updating a user document if the authenticated user's UID matches the document ID and the document exists.
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;

      // Allows deleting a user document if the authenticated user's UID matches the document ID and the document exists.
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;

      // Prevent listing of all user documents.
      allow list: if false;
    }

    /**
     * @description Enforces user-ownership for map layers, allowing only the authenticated user to
     *              manage their own map layers.
     * @path /users/{userId}/mapLayers/{mapLayerId}
     * @allow (create) User with ID 'user123' creates a map layer under their profile.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes a map layer under their profile.
     * @deny (create, get, update, delete) User with ID 'user456' attempts to access map layers under user 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mapLayers/{mapLayerId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
      }

      // Allows creating a map layer if the authenticated user's UID matches the userId and the userId field matches the path.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allows getting a map layer if the authenticated user's UID matches the userId.
      allow get: if isSignedIn() && isOwner(userId);

      // Allows updating a map layer if the authenticated user's UID matches the userId and the userId field cannot be changed.
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;

      // Allows deleting a map layer if the authenticated user's UID matches the userId.
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // Allows listing map layers if the authenticated user's UID matches the userId.
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to exploration suggestions, but restricts write access.
     * @path /explorationSuggestions/{explorationSuggestionId}
     * @allow (get, list) Any user can read exploration suggestions.
     * @deny (create, update, delete) No user can create, update, or delete exploration suggestions.
     * @principle Grants public read access but restricts write access.
     */
    match /explorationSuggestions/{explorationSuggestionId} {
      // Allows anyone to read exploration suggestions.
      allow get, list: if true;

      // Disallows creating exploration suggestions.
      allow create: if false;

      // Disallows updating exploration suggestions.
      allow update: if false;

      // Disallows deleting exploration suggestions.
      allow delete: if false;
    }
  }
}