/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset provides secure but flexible data access control, focusing on preventing unauthorized data modification while allowing rapid schema iteration.
 * It enforces strict ownership for user-specific data and public read access where appropriate.
 *
 * Data Structure:
 * The primary data resides in a top-level `/maps` collection.
 *
 * Key Security Decisions:
 * - Public read access for all maps.
 * - Only the creator of a map can modify or delete it.
 * - Schema validation is minimized to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` calls, the `SharedMap` documents must contain an `ownerId` field that matches the UID of the user who created it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to shared maps, but restricts creation, updates, and deletion to the owner.
     * @path /maps/{mapId}
     * @allow (get, list) - Any user can read any map.
     * @allow (create) - An authenticated user can create a map if `request.auth.uid` matches `request.resource.data.ownerId`.
     * @allow (update, delete) - Only the owner of the map (where `request.auth.uid` matches `resource.data.ownerId`) can update or delete it.
     * @deny (create) - An unauthenticated user cannot create a map.
     * @deny (update) - A user cannot update a map they don't own.
     * @deny (delete) - A user cannot delete a map they don't own.
     * @principle Public read, owner-only write access.
     */
    match /maps/{mapId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    // Helper functions

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}