/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset allows public read access to shared maps
 * while restricting write access to authenticated users.
 * @data_structure The data is stored in a top-level `sharedMaps` collection.
 * @key_security_decisions Public read access is granted to the `sharedMaps` collection,
 *  but write access is restricted to prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to shared maps and restricts write access to authenticated users.
     * @path /sharedMaps/{sharedMapId}
     * @allow (get, list) Public users can read shared maps.
     * @allow (create) Authenticated users can create shared maps. The 'createdAt' field will be set by the server.
     * @allow (update, delete) Authenticated users can update or delete shared maps.
     * @deny Any unauthenticated user cannot create, update, or delete shared maps.
     * @principle Allows public read access but restricts write access to authenticated users to prevent unauthorized modifications.
     */
    match /sharedMaps/{sharedMapId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdAt == request.time;
      allow update: if isSignedIn() && resource.data.createdAt == resource.data.createdAt;
      allow delete: if isSignedIn();
    }

    // Define helper functions.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}